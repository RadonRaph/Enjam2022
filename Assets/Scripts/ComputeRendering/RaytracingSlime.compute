// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#pragma kernel SlimePrepass
#pragma kernel CSRaymarch

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;



matrix worldToCam;
matrix projection;

matrix CamVP;
int slimesCount;
RWStructuredBuffer<float3> slimePos;
float3 camPos;
int width;
int height;
float2 ratio;
float2 offset;

//RWStructuredBuffer<float3> slimeScreenPos;


[numthreads(1,1,1)]
void SlimePrepass(uint3 id : SV_DispatchThreadID)
{
    float3 objInCam = slimePos[id.x]-camPos;

   // objInCam = mul(slimePos[id.x], worldToCam);

    float4 posF4 = mul(objInCam, worldToCam);
   // float4 posF4 =  float4(objInCam, 1);
   // float4 pos = mul(CamVP, posF4);
    float4 pos = mul (posF4, projection);

    float2 posScreen = pos.xy/pos.w;
    posScreen =  float2(posScreen.x *ratio.x, posScreen.y*ratio.y);
    posScreen = posScreen + float2(0.5f, 0.5f)+offset;
   // posScreen.y = 1-posScreen.y;

    posScreen = posScreen * float2(width, height);

    slimePos[id.x] = float3(posScreen, pos.w);
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    float3 color = float3(0,0,0);
    
    for (int i = 0; i < slimesCount; i++)
    {

        //*clamp(sign(pos.z), 0,1)
        float3 pos = slimePos[i];
        float d = distance(pos.xy, id.xy);

        float s = 100-(2*abs(pos.z));
        float p = clamp(100-d, 0 ,1)*clamp(sign(pos.z),0,1);

        color += float3(p,p,p);
    }

    color = color;

    Result[id.xy] = float4(color, 0.5);
}


float4 ray;
 
float sphere (float3 p,float3 c,float r)
{
    return length (p-c)-r;
}
 
float map (float3 p)
{
    return sphere (p,float3(0.0,0.0,0.0),1.0);
}
 
float3 set_normal (float3 p)
{
    float3 x = float3 (0.01,0.00,0.00);
    float3 y = float3 (0.00,0.01,0.00);
    float3 z = float3 (0.00,0.00,0.01);
    return normalize(float3(map(p+x)-map(p-x), map(p+y)-map(p-y), map(p+z)-map(p-z)));
}
 
float3 lighting ( float3 p)
{
    float3 AmbientLight = float3 (0.1,0.1,0.1);
    float3 LightDirection = normalize(float3(4.0,10.0,-10.0));
    float3 LightColor = float3 (1.0,1.0,1.0);
    float3 NormalDirection = set_normal(p);
    return  max ( dot(LightDirection, NormalDirection),0.0) * LightColor + AmbientLight;
}
 
float4 raymarch (float3 ro,float3 rd)
{
    for (int i=0;i<128;i++)
    {
        float t = map(ro);
        if (t<0.01) return float4(lighting(ro),1.0); else ro+=t*rd;
    }
    return float4(0.0,0.0,0.0,1.0);
}
 
[numthreads(8,8,1)]
void CSRaymarch (uint2 id : SV_DispatchThreadID)
{
    float2 resolution = float2 (height,width);
    float2 coordinates = float2 (id.x,id.y);
    float2 p = (2.0*coordinates.xy-resolution.xy)/resolution.y;
    float3 rd = normalize( float3(p.xy,2.0));
    Result[id] = raymarch( ray.xyz, rd );
}
 



